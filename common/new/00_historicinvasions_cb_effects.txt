### spawn special troops for one war
# triggered within CB
historicinvasions_spawn_army_effect = {
	if = {
		limit = { current_military_strength < war_enemy_total_strength_value }
		spawn_army = {
			name = event_troop_default_name
			location = scope:attacker.capital_province
			war = scope:war
			uses_supply = no
			inheritable = no
			
			levies = {
				value = 0
				add = war_enemy_total_strength_difference_value
				multiply = 0.4
				min = 0
				max = 15000
				multiply = historicinvasions_spawn_army_multiplier_value
			}
		}
		spawn_army = {
			name = event_troop_default_name
			location = scope:attacker.capital_province
			war = scope:war
			uses_supply = no
			inheritable = no
			
			levies = {
				value = 0
				add = war_enemy_total_strength_difference_value
				multiply = 0.4
				min = 0
				max = 15000
				multiply = historicinvasions_spawn_army_multiplier_value
			}
		}
		spawn_army = {
			name = event_troop_default_name
			location = scope:attacker.capital_province
			war = scope:war
			uses_supply = no
			inheritable = no
			
			levies = {
				value = 0
				add = war_enemy_total_strength_difference_value
				multiply = 0.4
				min = 0
				max = 15000
				multiply = historicinvasions_spawn_army_multiplier_value
			}
		}
	}
}

historicinvasions_spawn_unlanded_army_effect = {
	spawn_army = {
		name = event_troop_default_name
		location = scope:attacker.primary_title.title_capital_county.title_province
		war = scope:war
		uses_supply = no
		inheritable = no
		
		levies = {
			value = 0
			# add = war_enemy_total_strength_value
			# subtract = scope:attacker.max_military_strength
			add = war_enemy_total_strength_difference_value
			multiply = 0.4
			min = 0
			max = 12000
			multiply = historicinvasions_spawn_army_multiplier_value
		}
	}
	spawn_army = {
		name = event_troop_default_name
		location = scope:attacker.primary_title.title_capital_county.title_province
		war = scope:war
		uses_supply = no
		inheritable = no
		
		levies = {
			value = 0
			add = war_enemy_total_strength_difference_value
			multiply = 0.4
			min = 0
			max = 12000
			multiply = historicinvasions_spawn_army_multiplier_value
		}
	}
	spawn_army = {
		name = event_troop_default_name
		location = scope:attacker.primary_title.title_capital_county.title_province
		war = scope:war
		uses_supply = no
		inheritable = no
		
		levies = {
			value = 0
			add = war_enemy_total_strength_difference_value
			multiply = 0.4
			min = 0
			max = 12000
			multiply = historicinvasions_spawn_army_multiplier_value
		}
	}

	### fourth crusade
	if = {
		limit = {
			is_target_in_global_variable_list = {
				name = historicinvasions_story_started
				target = flag:vlaanderen_story_started
			}
			scope:attacker = title:e_vlaanderen.holder
			title:e_vlaanderen = { is_landless_type_title = yes }
			scope:defender = title:e_byzantium.holder
		}
		trigger_event = vlaanderen_invasion.0100
	}
}

### victory effect
historicinvasions_invasion_war_victory_effect = {
	### change_one
	create_title_and_vassal_change = {
		type = conquest
		save_scope_as = change_one
		add_claim_on_loss = yes
	}
	# Target titles + dominant empires only
	#scope:attacker = { highest_held_title_tier = tier_empire }
	scope:defender = {
		if = {
			limit = { always = no }
			# Check whether any additional empires should be considered target titles
			# First check for the primary defender
			every_realm_de_jure_empire = {
				limit = {
					any_in_de_jure_hierarchy = { # Then check how many de jure counties are in their own realm
						count >= 8 # This number (og = 8) determines how many counties activates the threshold for taking these titles
						continue = {
							tier > tier_county
						}
						exists = this
						tier = tier_county
						exists = holder
						holder.top_liege = scope:attacker
					}
				}
				add_to_temporary_list = target_titles
			}
			# Mark any empire-level titles for destruction after transfer
			every_realm_de_jure_empire = {
				limit = {
					holder = scope:defender
					#holder = { is_ai = yes } # don't destroy player-held empires
					is_in_list = target_titles
				}
				add_to_list = titles_to_destroy
			}
		}
		else_if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier >= tier_kingdom
				}
			}
			# Check whether any additional kingdoms should be considered target titles
			# First check for the primary defender
			every_realm_de_jure_kingdom = {
				limit = {
					any_in_de_jure_hierarchy = { # Then check how many de jure counties are in the INVADER's realm
						count >= 8 # This number (og = 8) determines how many counties activate the threshold for taking these titles
						continue = {
							tier > tier_county
						}
						exists = this
						tier = tier_county
						exists = holder
						holder.top_liege = scope:attacker
					}
				}
				add_to_temporary_list = target_titles
			}
			# Mark any kingdom-level titles for destruction after transfer
			every_realm_de_jure_kingdom = {
				limit = {
					holder = scope:defender
					#holder = { is_ai = yes } # don't destroy player-held kingdoms
					is_in_list = target_titles
				}
				add_to_list = titles_to_destroy
			}
		}
		else_if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier <= tier_duchy
				}
			}
			# Check whether any additional duchies should be considered target titles
			# First check for the primary defender
			every_realm_de_jure_duchy = {
				limit = {
					any_in_de_jure_hierarchy = { # Then check how many de jure counties are in the INVADER's realm
						count >= 2 # This number (og = 8) determines how many counties activate the threshold for taking these titles
						continue = {
							tier > tier_county
						}
						exists = this
						tier = tier_county
						exists = holder
						holder.top_liege = scope:attacker
					}
				}
				add_to_temporary_list = target_titles
			}
			# Mark any duchy-level titles for destruction after transfer
			every_realm_de_jure_duchy = {
				limit = {
					holder = scope:defender
					#holder = { is_ai = yes } # don't destroy player-held duchies
					is_in_list = target_titles
				}
				add_to_list = titles_to_destroy
			}
		}	
	}

	# if possible, vassalize vassals of the defender if their primary title is of the same tier as the attacker's primary title
	#scope:defender.primary_title.tier > scope:attacker.primary_title.tier
	if = { # king vs emperor
		limit = {
			scope:defender.primary_title.tier = tier_empire
			scope:attacker.primary_title.tier = tier_kingdom
		}
		scope:defender = {
			every_realm_de_jure_kingdom = {
				limit = {
					#holder = { target_is_liege_or_above = scope:defender }
					holder.top_liege = scope:defender
					is_in_list = target_titles
				}
				add_to_list = titles_to_destroy_vassal
			}
		}
	}
	else_if = { # duke vs king
		limit = {
			scope:defender.primary_title.tier = tier_kingdom
			scope:attacker.primary_title.tier = tier_duchy
		}
		scope:defender = {
			every_realm_de_jure_duchy = {
				limit = {
					#holder = { target_is_liege_or_above = scope:defender }
					holder.top_liege = scope:defender
					is_in_list = target_titles
				}
				add_to_list = titles_to_destroy_vassal
			}
		}
	}
	# else_if = { # same vs same, defender only holds land within the targeted title
	# 	limit = { scope:defender.primary_title.tier = scope:attacker.primary_title.tier }
	# }

	# Destroy any vassal titles that should be destroyed
	every_in_list = {
		list = titles_to_destroy_vassal
		scope:attacker = {
			destroy_title = prev
		}
	}
	
	# Most of the title transfers are handled here
	setup_invasion_cb = {
		titles = target_titles
		attacker = scope:attacker
		defender = scope:defender
		change = scope:change_one
		take_occupied = no
	}
	resolve_title_and_vassal_change = scope:change_one

	# Destroy any held titles that should be destroyed
	every_in_list = {
		list = titles_to_destroy
		scope:attacker = {
			destroy_title = prev
		}
	}

	### change_two
	# If the defender was vassalised, take any Kingdom title they hold
	# currently being destroyed further up if AI
	# players get ejected instead
	scope:defender = {
		if = {
			limit = {
				target_is_liege_or_above = scope:attacker
				any_held_title = {
					tier = tier_kingdom
				}
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change_two_kingdom
				add_claim_on_loss = yes
			}
			every_held_title = {
				limit = {
					tier = tier_kingdom
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change_two_kingdom
				}
			}
			resolve_title_and_vassal_change = scope:change_two_kingdom
		}
	}

	### band-aid solution to counteract 'offensive war' vassal opinion malus
	scope:attacker = {
		every_vassal = {
			add_opinion = {
				modifier = liege_won_historicinvasion_war
				target = prev
			}
		}
	}
}

### game over is prevented for player character
historicinvasions_prevent_player_game_over_effect = {
	# determine county
	scope:attacker.primary_title = {
		random_in_de_facto_hierarchy = {
			limit = {
				tier = tier_county
				holder = { is_ai = yes }
				NOT = { holder = scope:attacker }
			}
			save_scope_as = player_compensation_title
		}
	}

	# hand out county
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = title_compensation_change
		add_claim_on_loss = no
	}
	scope:player_compensation_title = {
		change_title_holder = {
			holder = scope:defender
			change = scope:title_compensation_change
		}
	}
	resolve_title_and_vassal_change = scope:title_compensation_change

	# hand out temporary duchy (if possible)
	if = {
		limit = { scope:attacker.primary_title.tier > tier_duchy }
		create_dynamic_title = {
			tier = duchy
			name = tmp_honorary_duchy
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:new_title = {
			set_capital_county = scope:player_compensation_title
			set_definitive_form = yes
			set_color_from_title = scope:player_compensation_title
			set_destroy_on_gain_same_tier = yes
			generate_coa = yes
			change_title_holder = {
				holder = scope:defender
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change
	}
	else = {}
	
	# opinion bonus
	scope:attacker = {
		add_opinion = {
			target = scope:defender
			modifier = hi_honorable_defeat
		}
	}

	# spawn troops
	spawn_army = {
		uses_supply = no
		inheritable = yes
		name = honor_guard
		levies = {
			value = 1500
		}
		men_at_arms = {
			type = light_footmen
			stacks = 5
		}
		men_at_arms = {
			type = bowmen
			stacks = 5
		}
		location = scope:player_compensation_title.title_province
	}

	# notification event for player
	trigger_event = historicinvasions_event.1000
}