### create nomad
turkish_migration_effect = {
	# pick spawn location
	random_list = {
		1 = { title:c_sarkel.title_province = { save_scope_as = turkish_nomad_spawn_location } }
		1 = { title:c_ustyurt.title_province = { save_scope_as = turkish_nomad_spawn_location } }
		1 = { title:c_odessa.title_province = { save_scope_as = turkish_nomad_spawn_location } }
	}

	# pick target title
	turkish_migration_target_evaluation_effect = yes

	# if a target title is found, go further
	if = {
		limit = { exists = scope:turkish_migration_target }
		# debug log
		debug_log = "a turkish migration character has appeared"
		debug_log_date = yes
		# create nomad
		if = {
			limit = { has_game_rule = inversed_gender_equality }
			create_character = {
				template = turkish_nomad_adventurer_character_template
				gender = female
				location = scope:turkish_nomad_spawn_location
				save_scope_as = turkish_nomad
			}
		}
		else_if = {
			limit = { has_game_rule = full_gender_equality }
			create_character = {
				template = turkish_nomad_adventurer_character_template
				gender_female_chance = 50
				location = scope:turkish_nomad_spawn_location
				save_scope_as = turkish_nomad
			}
		}
		else = {
			create_character = {
				template = turkish_nomad_adventurer_character_template
				gender = male
				location = scope:turkish_nomad_spawn_location
				save_scope_as = turkish_nomad
			}
		}

		# create temporary title
		create_dynamic_title = {
			tier = duchy
			name = turkish_nomad_title
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:new_title = {
			set_capital_county = scope:turkish_migration_target.county
			set_landless_title = yes
			set_delete_on_destroy = yes
			set_no_automatic_claims = yes
			set_can_be_named_after_dynasty = yes
			set_destroy_on_gain_same_tier = yes
			set_destroy_on_succession = no
			change_title_holder = {
				holder = scope:turkish_nomad
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change
		scope:new_title = {
			#set_title_name = hi_turkish_nomad_title_new
			generate_coa = yes
			set_color_from_title = scope:turkish_migration_target
		}

		scope:turkish_nomad = {
			set_variable = {
				name = turkish_nomad_title
				value = scope:new_title
			}
			# set_variable = {
			# 	name = turkish_migration_target
			# 	value = scope:turkish_migration_target
			# }
		}

		# send offer
		scope:turkish_migration_target.county_controller.top_liege = {
			save_scope_as = offer_recipient
			trigger_event = turkish_migrations.2001
		}
	}
	else = {
		debug_log = "valid turkish migration target title not found"
		debug_log_scopes = yes
		debug_log_date = yes
	}
}

### pick target title
turkish_migration_target_evaluation_effect = {
	random_county_in_region = {
		region = special_turkish_migration_region
		limit = {
			exists = holder
			holder = { is_ai = yes }
			NOR = {
				# certain character modifiers protect from nomads
				holder.top_liege = { has_character_modifier = historicinvasions_plot_armor }
				holder.top_liege = { has_character_modifier = defended_from_turkish_nomad_modifier }
				holder.top_liege = { has_character_modifier = settled_turkish_nomad_modifier }
				# don't pick realm capital counties
				this = holder.top_liege.capital_county
			}
		}
		alternative_limit = {
			exists = holder
			holder = { is_ai = yes }
			NOR = {
				# certain character modifiers protect from nomads
				holder.top_liege = { has_character_modifier = defended_from_turkish_nomad_modifier }
				holder.top_liege = { has_character_modifier = settled_turkish_nomad_modifier }
				# don't pick realm capital counties
				this = holder.top_liege.capital_county 
			}
		}
		county = { save_scope_as = turkish_migration_target }
		duchy = { save_scope_as = turkish_migration_target_duchy } # localization
	}
}

### nomad buys land and becomes a vassal
turkish_nomad_receives_territory_effect = {
	# hand out counties
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = change_one
	}
	if = { # duchy
		limit = { tier_$RECEIVED_TIER$ = tier_duchy }
		scope:turkish_migration_target.$RECEIVED_TIER$ = {
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					exists = holder
					holder = { is_ai = yes }
					NOT = { this = holder.top_liege.capital_county } # don't sell your capital
					holder.top_liege = scope:offer_recipient # don't sell land belonging to other realms
				}
				add_to_list = received_counties
			}
		}
		every_in_list = {
			list = received_counties
			change_title_holder = {
				holder = scope:turkish_nomad
				change = scope:change_one
			}
		}
	}
	else = { # county
		scope:turkish_migration_target = {
			change_title_holder = {
				holder = scope:turkish_nomad
				change = scope:change_one
			}
		}
	}
	resolve_title_and_vassal_change = scope:change_one

	# swear fealty
	create_title_and_vassal_change = {
		type = swear_fealty
		save_scope_as = change_two
	}
	scope:turkish_nomad = {
		if = {
			limit = {
				has_variable = turkish_nomad_title
				highest_held_title_tier > tier_$RECEIVED_TIER$
			}
			hidden_effect = { destroy_title = this.var:turkish_nomad_title }
		}
		change_liege = {
			liege = scope:offer_recipient
			change = scope:change_two
		}
	}
	resolve_title_and_vassal_change = scope:change_two

	# tribe moves in, too
	scope:turkish_migration_target = {
		set_county_culture = scope:turkish_nomad.culture
		set_county_faith = scope:turkish_nomad.faith
	}

	# maintenance
	scope:turkish_nomad = {
		set_realm_capital = scope:turkish_migration_target
		add_truce_both_ways = {
			character = scope:offer_recipient
			override = yes
			years = historicinvasions_swear_fealty_truce_value
			name = TRUCE_SWEAR_FEALTY
		}
		add_opinion = {
			target = scope:offer_recipient
			modifier = received_title_county
		}
		progress_towards_friend_effect = {
			REASON = friend_granted_title
			CHARACTER = scope:offer_recipient
			OPINION = 0
		}
		if = {
			limit = { highest_held_title_tier > tier_county }
			primary_title = { set_landless_title = no }
		}
		# generate family
		trigger_event = game_rule.1001
		# convert bastard trait
		if = {
			limit = { has_trait = bastard }
			remove_trait = bastard
			add_trait = bastard_founder
		}
		# army
		spawn_army = {
			name = turkish_nomad_event_troops
			location = scope:turkish_nomad.primary_title.title_capital_county.title_province
			uses_supply = yes
			inheritable = yes
			
			levies = 200
			men_at_arms = {
				type = horse_archers
				stacks = 3
			}
			men_at_arms = {
				type = light_horsemen
				stacks = 3
			}
		}
	}
}

turkic_migration_war_declaration_effect = {
	scope:attacker = { save_scope_as = turkish_nomad }
	if = {
		limit = { scope:defender.current_military_strength > 14000 }
		turkic_migration_war_declaration_troop_effect = yes
		turkic_migration_war_declaration_troop_effect = yes
		turkic_migration_war_declaration_troop_effect = yes
	}
	else_if = {
		limit = { scope:defender.current_military_strength > 9000 }
		turkic_migration_war_declaration_troop_effect = yes
		turkic_migration_war_declaration_troop_effect = yes
	}
	else = {
		turkic_migration_war_declaration_troop_effect = yes
	}
}
turkic_migration_war_declaration_troop_effect = {
	# 4000
	spawn_army = {
		name = turkish_nomad_event_troops
		location = scope:turkish_nomad.primary_title.title_capital_county.title_province
		war = scope:war
		uses_supply = no
		inheritable = no
		
		levies = 700
		men_at_arms = {
			type = horse_archers
			stacks = 18
		}
		men_at_arms = {
			type = light_horsemen
			stacks = 12
		}
		men_at_arms = {
			type = armored_horsemen
			stacks = 6
		}
		# siege
		men_at_arms = {
			type = mangonel
			stacks = 5
		}
	}
}

turkic_migration_war_victory_effect = {
	scope:attacker = { save_scope_as = turkish_nomad }
	scope:turkish_nomad = {
		# tribe moves in, too; via event so I can scope to their capital county 1 day later - since everything happens at once, they don't have a capital yet (the effect still works though - but it causes hundreds of error.log entries)
		# I could simply scope to the original migration target, but that might not be their chosen capital
		trigger_event = {
			id = turkish_migrations.3001
			days = 1
		}
		# switch over to a landed title
		if = {
			limit = { highest_held_title_tier > tier_county }
			primary_title = { set_landless_title = no }
		}
		# generate family
		trigger_event = game_rule.1001
		# convert bastard trait
		if = {
			limit = { has_trait = bastard }
			remove_trait = bastard
			add_trait = bastard_founder
		}
		# army
		spawn_army = {
			name = turkish_nomad_event_troops
			location = scope:turkish_nomad.primary_title.title_capital_county.title_province
			uses_supply = yes
			inheritable = yes
			
			levies = 500
			men_at_arms = {
				type = horse_archers
				stacks = 5
			}
			men_at_arms = {
				type = light_horsemen
				stacks = 3
			}
			men_at_arms = {
				type = armored_horsemen
				stacks = 1
			}
		}
	}
}