##### scripted effects
# periodically triggered via story
# CB is chosen via events

#culture:x = { has_same_culture_heritage = culture:y }

### disease resistance
disease_immunity_short_effect = {
	add_character_flag = {
		flag = immune_to_disease
		years = 10
	}
}
disease_immunity_long_effect = {
	add_character_flag = {
		flag = immune_to_disease
		years = 30
	}
}

### invader modifiers
apply_invader_modifiers_effect = {
	add_character_flag = is_first_invader_flag # CB is free for that character
	disease_immunity_long_effect = yes
	add_character_modifier = first_$INVADER_DYNN$_modifier # unique buffs for first invader
	add_character_modifier = historicinvasions_plot_armor # generic buffs for every invader
	if = {
		limit = { has_fp1_dlc_trigger = yes }
		add_character_modifier = fp1_reprieve_from_sa_modifier
	}
}

### hand out counties at start of story
give_invader_land_effect = {
	# find a starting location that doesn't screw players over
	if = {
		# are there any AI-held counties within the region?
		limit = {
			any_county_in_region = {
				region = special_$INVADER_DYNN$_conquest_region_start
				count > 0
				holder = { is_ai = yes }
			}
		}
		# pick out a county as starting point and scope upwards to its duchy
		random_county_in_region = { # bigger duchies are more likely to be picked
			# try to only pick duchies with only AI-held counties
			limit = {
				$STARTING_TIER$ = { # usually a duchy; can be any other tier
					any_in_de_jure_hierarchy = {
						tier = tier_county
						count = all
						holder = { is_ai = yes }
					}
				}
			}
			# alternatively, pick any AI-held county
			alternative_limit = { holder = { is_ai = yes } }
			region = special_$INVADER_DYNN$_conquest_region_start
			$STARTING_TIER$ = { save_scope_as = starting_landed_titles } # usually a duchy; can be any other tier
		}
		# then scope downwards to every de jure AI-held county
		scope:starting_landed_titles = {
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					holder = { is_ai = yes }
				}
				add_to_list = starting_titles_list
			}
		}
	}
	else = { # fallback; should theoretically never trigger due to check at story start event
		debug_log = "story used fallback land grant effect"
		debug_log_date = yes
		debug_log_scopes = yes
		
		random_county_in_region = {
			region = special_$INVADER_DYNN$_conquest_region_start
			add_to_list = starting_titles_list
		}
	}

	# hand out titles
	create_title_and_vassal_change = {
		type = usurped
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	every_in_list = {
		list = starting_titles_list
		change_title_holder = {
			holder = $INVADER_CHAR$
			change = scope:title_change
		}

		#############################
		#####  CULTURE & FAITH  #####
		#############################

		### change nothing
		if = {
			limit = { $INVADER_CHAR$ = { has_character_modifier = first_rurikid_modifier } }
		}
		### change faith & culture
		else_if = {
			limit = {
				$INVADER_CHAR$ = {
					OR = {
						has_character_modifier = first_anushtiginid_modifier
						has_character_modifier = first_yelu_modifier
						has_character_modifier = first_ottoman_modifier
						has_character_modifier = first_gediminid_modifier
						has_character_modifier = first_song_modifier
					}
				}
			}
			set_county_faith = $INVADER_CHAR$.faith
			set_county_culture = $INVADER_CHAR$.culture
		}
		### only sometimes change faith, don't change culture
		else_if = {
			limit = {
				$INVADER_CHAR$ = {
					OR = {
						has_character_modifier = first_keita_modifier
					}
				}
			}
			if = {
				limit = { NOT = { religion = religion:islam_religion } }
				set_county_faith = $INVADER_CHAR$.faith
			}
		}
		### default: always change faith, don't change culture
		else = { set_county_faith = $INVADER_CHAR$.faith }
	}
	# change culture in just one random county
	if = {
		limit = { $INVADER_CHAR$ = { has_character_modifier = first_al-qays_modifier } }
		random_in_list = {
			list = starting_titles_list
			random_list = {
				1 = { set_county_culture = culture:ethiopian }
				1 = { set_county_culture = culture:nubian }
				1 = { set_county_culture = culture:welayta }
				1 = { set_county_culture = culture:daju }
			}
		}
	}
	scope:starting_landed_titles = {
		change_title_holder = {
			holder = $INVADER_CHAR$
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	# raise control
	every_in_list = {
		list = starting_titles_list
		change_county_control = 100
	}
	every_realm_province = {
		refill_levy = yes
		refill_garrison = yes
	}

	# government
	if = {
		limit = { $INVADER_CHAR$.capital_county.title_province = { has_holding_type = tribal_holding } }
		$INVADER_CHAR$.capital_county.title_province = { set_holding_type = castle_holding }
	}
}

### spawn invader court
spawn_invader_servants_effect = {
	# spawn warriors
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_warrior_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}

	# spawn commanders
	create_character = {
		template = new_commander_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_commander_character
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}

	# spawn siege engineers
	create_character = {
		template = new_siege_engineer
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_siege_engineer
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_siege_engineer
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
	create_character = {
		template = new_siege_engineer
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}

	# physician
	create_character = {
		template = hi_new_physician_template
		gender_female_chance = historicinvasions_soldier_female_chance
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
	}
}

### hand out the title that serves as an anchor for the invasion story
form_the_invader_title_effect = {
	# give title
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	if = {
		limit = { $INVADER_CHAR$ = { has_character_modifier = first_fatimid_modifier } }
		title:d_shiite = {
			change_title_holder = {
				holder = $INVADER_CHAR$
				change = scope:title_change
			}
		}
	}
	$INVADER_TITLE$ = {
		change_title_holder = {
			holder = $INVADER_CHAR$
			change = scope:title_change
		}
		set_landless_title = $LANDLESS_YES_NO$
	}
	becomes_independent = { change = scope:title_change }
	resolve_title_and_vassal_change = scope:title_change

	set_primary_title_to = $INVADER_TITLE$

	# dread
	add_dread = high_dread

	# government
	if = {
		limit = { $INVADER_CHAR$ = { has_character_modifier = first_ziyarid_modifier } }
		change_government = feudal_government
	}
	else_if = {
		limit = { $INVADER_CHAR$ = { religion = religion:islam_religion } }
		change_government = clan_government
	}
	else_if = {
		limit = { $INVADER_CHAR$ = { has_character_modifier = first_attila_modifier } }
		change_government = tribal_government
	}

	#############################
	##### TITLE DESTRUCTION #####
	#############################

	# guaranteed title destruction on succession
	if = {
		limit = {
			$INVADER_CHAR$ = {
				OR = {
					has_character_modifier = first_knytling_modifier
					has_character_modifier = first_yngling_modifier
					has_character_modifier = first_attila_modifier
					has_character_modifier = first_qarghuyid_modifier
					has_character_modifier = first_vivar_modifier
					has_character_modifier = first_argead_modifier
				}
			}
		}
		$INVADER_TITLE$ = { set_destroy_on_succession = yes }
	}
	# conditional title destruction on inheritance
	# make sure that the title is destroyed on succession if the heir alredy holds a different kingdom
	if = {
		limit = {
			$INVADER_CHAR$ = {
				OR = {
					has_character_modifier = first_ziyarid_modifier
					has_character_modifier = first_hauteville_modifier
					has_character_modifier = first_jannabid_modifier
					has_character_modifier = first_al-qays_modifier
					has_character_modifier = first_normandie_modifier
					#has_character_modifier = first_piast_modifier # set at end of story
				}
			}
		}
		$INVADER_TITLE$ = { set_variable = set_destroy_on_gain_same_tier_var }
	}

	# spawn troops; delayed to prevent error.log entry
	trigger_event = {
		id = $INVADER_DYNN$_invasion.0100
		days = 1
	}
}

### story owner death
invader_story_on_death_effect = {
	# end story because all scripted territory has been conquered
	if = {
		limit = { story_owner = { completely_controls_region = special_$INVADER_DYNN$_conquest_region_total } }
		debug_log = "ending invasion story because the conquest goal has been achieved"
		end_story = yes
	}
	# end story because a war was lost to a player; fallback just in case the AI is still waging war
	else_if = {
		limit = { story_owner = { has_character_flag = invasion_ends_after_player_win } }
		debug_log = "ending invasion story because a player was able to defend against the invader (after owner death)"
		end_story = yes
	}
	# end story because a war was lost (set in CB on defeat for special rebellions or uprisings)
	else_if = {
		limit = { story_owner = { has_character_flag = invasion_ends_after_offensive_defeat } }
		debug_log = "ending invasion story because a player was able to defend against the invader (after owner death)"
		end_story = yes
	}
	# end story due to ruler count / succession?
	else_if = {
		limit = { has_variable = end_of_invasion_story }
		debug_log = "ending invasion story due to story_owner_counter (succession variable)"
		end_story = yes
	}
	# if not, try to find a new story owner
	else = {
		change_variable = {
			name = story_owner_counter
			add = 1
		}
		# handle story succession
		story_owner = {
			if = {
				# previous owner has heir
				limit = { any_child = { is_primary_heir_of = scope:story.story_owner } }
				random_child = {
					limit = { is_primary_heir_of = scope:story.story_owner }
					save_scope_as = new_story_owner
				}
			}
			else_if = {
				# previous owner has other heir (not family?)
				limit = { dynasty = { any_dynasty_member = { is_primary_heir_of = scope:story.story_owner } } }				
				dynasty = {
					random_dynasty_member = {
						limit = { is_primary_heir_of = scope:story.story_owner }
						save_scope_as = new_story_owner
					}
				}
			}
			else_if = {
				# previous owner does NOT have a dynasty heir
				limit = { NOT = { dynasty = { any_dynasty_member = { is_primary_heir_of = scope:story.story_owner } } } }
				# do not set a scope = end story
			}
		}
		# did the script find a valid new story owner? if yes, apply buffs & troops
		if = {
			limit = { exists = scope:new_story_owner }
			# transfer story ownership
			make_story_owner = scope:new_story_owner
			# maintenance
			scope:new_story_owner = { invader_succession_bonus_effect = { INVADER_DYNN = $INVADER_DYNN$ } }
		}
		# if not, end story
		else = {
			debug_log = "ending invasion story because a new story owner couldn't be found"
			end_story = yes
		}
	}
}

### bonus on succession
invader_succession_bonus_effect = {
	# modifiers
	disease_immunity_long_effect = yes
	add_character_modifier = historicinvasions_plot_armor
	if = {
		limit = { has_fp1_dlc_trigger = yes }
		add_character_modifier = fp1_reprieve_from_sa_modifier
	}
	# currency
	add_gold = massive_gold_value
	add_prestige = massive_prestige_value
	add_piety = minor_piety_value
	# inherit title on action: dread
	add_character_flag = {
		flag = gain_invader_succession_dread
		days = 2
	}
	# troops
	trigger_event = {
		id = $INVADER_DYNN$_invasion.0100
		days = 1
	}
}

### story end
invader_story_on_end_effect = {
	debug_log_date = yes
	add_to_global_variable_list = {
		name = historicinvasions_story_ended
		target = flag:$INVADER_DYNN$_story_ended
	}
	scope:story.story_owner = { remove_character_modifier = historicinvasions_plot_armor }
	if = {
		limit = { has_fp1_dlc_trigger = yes }
		scope:story.story_owner = { remove_character_modifier = fp1_reprieve_from_sa_modifier }
	}
	# interface message
	every_player = {
		send_interface_message = {
			type = event_generic_neutral
			title = message_invasion_story_ended_title
			right_icon = scope:story.story_owner
			custom_tooltip = message_story_ended_tooltip
		}
	}
}

### succession weirdness trigger
hi_check_for_valid_story_owner_effect = {
	# make title holder the new invasion story owner; if the title is destroyed, end the story
	if = {
		limit = { $INVADER_TITLE$ = { is_title_created = yes } }
		debug_log = "transferred invasion story ownership because the previous owner lost the invader title"
		debug_log_scopes = yes
		debug_log_date = yes

		# transfer story ownership
		story_owner = {
			remove_character_modifier = historicinvasions_plot_armor
			if = {
				limit = { has_fp1_dlc_trigger = yes }
				remove_character_modifier = fp1_reprieve_from_sa_modifier
			}
		}
		make_story_owner = $INVADER_TITLE$.holder
		story_owner = {
			add_character_modifier = historicinvasions_plot_armor
			if = {
				limit = { has_fp1_dlc_trigger = yes }
				add_character_modifier = fp1_reprieve_from_sa_modifier
			}
		}
		# optionally make story end faster
		change_variable = {
			name = story_owner_counter
			add = $STORY_COUNTER_INCREASE$
		}
	}
	else = {
		debug_log = "ending invasion story because the invader title is no longer created"
		debug_log_scopes = yes

		end_story = yes
	}
	# I don't know how the story could start without the title existing. Could happen if a player triggers new events in an old save manually? Fallback, just in case.
	if = {
		limit = { NOT = { exists = $INVADER_TITLE$ } }
		debug_log = "ending invasion story because a title somehow stopped existing"
		debug_log_scopes = yes

		end_story = yes
	}
}

### de jure changes
# list all kingdoms within region
historicinvasions_de_jure_potential = {
	every_county_in_region = {
		region = special_$INVADER_DYNN$_conquest_region_de_jure
		$INVADER_TARGET_TITLE_TIER$ = { add_to_list = $INVADER_DYNN$_de_jure_potential_list }
	}
}
# de jure shift into story_owners title if they control more than x%
historicinvasions_de_jure_change = {
	historicinvasions_de_jure_potential = {
		INVADER_DYNN = $INVADER_DYNN$
		INVADER_TARGET_TITLE_TIER = $INVADER_TARGET_TITLE_TIER$
	}
	every_in_list = {
		list = $INVADER_DYNN$_de_jure_potential_list
		limit = {
			any_in_de_jure_hierarchy = {
				filter = { tier = tier_county }
				continue = { tier > tier_county }
				OR = {
					holder = $INVADER_CHAR$
					holder = { target_is_liege_or_above = $INVADER_CHAR$ }
				}
				percent > $DE_JURE_PERCENT$
			}
			NOT = { de_jure_liege = $INVADER_TITLE$ }
		}
		set_de_jure_liege_title = $INVADER_TITLE$
	}
}

### Story war target evaluation
# in-game debug console: "effect [effect_name] = yes"
choose_next_invasion_target_title_effect = {
	# shows every de jure lower tier title neighboring main title that is within a specified geographical region. if one title_province is de facto owned by the scoped title, it is not considered 'neighboring' any more and thus won't be added to the list
	# INVADER_RANGE = neighboring / neighboring_and_across_water
	$INVADER_CHAR$ = {
		random_character_to_title_$INVADER_RANGE$_$INVADER_TARGET_TITLE_TIER$ = {
			limit = {
				any_de_jure_county = {
					title_province = { geographical_region = special_$INVADER_DYNN$_conquest_region_$INVADER_REGION$ }
				}
				# any_county_in_region = { region = special_$INVADER_DYNN$_conquest_region_$INVADER_REGION$ }
			}
			save_scope_as = next_invasion_target_title
		}
	}
}

### Story war target declaration
war_target_evaluation_and_declaration_effect = {
	save_scope_as = invader
	add_character_flag = { flag = free_historicinvasions_cb days = 24 }
	choose_next_invasion_target_title_effect = {
		INVADER_DYNN = $INVADER_DYNN$
		INVADER_CHAR = $INVADER_CHAR$
		INVADER_REGION = $INVADER_REGION$
		INVADER_TARGET_TITLE_TIER = $INVADER_TARGET_TITLE_TIER$
		INVADER_RANGE = $INVADER_RANGE$
	}
	if = {
		limit = { exists = scope:next_invasion_target_title }
		scope:next_invasion_target_title = {
			every_de_jure_top_liege = {
				limit = {
					is_ruler = yes

					# don't hit yourself
					NOR = {
						this = $INVADER_CHAR$
						top_liege = $INVADER_CHAR$
					}

					# additional restrictions
					$INVADER_LIEGE_RESTRICTIONS$
					
					save_temporary_scope_as = truce_check
					NOT = {
						$INVADER_CHAR$ = {
							any_truce_target = {
								this = scope:truce_check
							}
						}
					}
				}
		 		add_to_temporary_list = lieges_to_declare_on
			}
		}
		every_in_list = {
			list = lieges_to_declare_on
			limit = {
				is_ruler = yes

				# An extra check to make sure we haven't snuck any story_owners territory in
				NOR = {
					this = $INVADER_CHAR$
					top_liege = $INVADER_CHAR$
				}

				# additional restrictions
				$INVADER_LIEGE_RESTRICTIONS$

				# Standard conditions
				is_independent_ruler = yes
				NOR = {
					is_at_war_with = $INVADER_CHAR$
					is_in_list = has_been_sent_subjugation_offer
				}
				save_temporary_scope_as = truce_check
				NOT = {
					$INVADER_CHAR$ = {
						any_truce_target = {
							this = scope:truce_check
						}
					}
				}
			}
			add_to_list = has_been_sent_subjugation_offer
			send_subjugation_demand_effect = {
				INVADER_CHAR = $INVADER_CHAR$
			}
		}
	}
	else = {
		debug_log = "war_target_evaluation_and_declaration_effect FAILED"
		debug_log_date = yes
		debug_log_scopes = yes
	}
}

# Send subjugation demand effect
send_subjugation_demand_effect = {
	if = { # not allied to invader
		limit = {
			NOT = { is_allied_to = $INVADER_CHAR$ }
		}
		trigger_event = { # accept / refuse
			id = historicinvasions_event.2001
			days = { 3 12 }
		}

		save_temporary_scope_as = subjugation_offer_recipient
		$INVADER_CHAR$ = {
			add_to_variable_list = {
				name = subjugation_offer_under_consideration
				target = scope:subjugation_offer_recipient
			}
		}
	}
	else = { # allied to invader
		if = {
			limit = {
				highest_held_title_tier >= $INVADER_CHAR$.primary_title.tier
			}
			trigger_event = { # can only refuse = alliance broken
				id = historicinvasions_event.2111
				days = { 3 12 }
			}
		}
		else = {
			trigger_event = { # accept / refuse
				id = historicinvasions_event.2101
				days = { 3 12 }
			}
		}
	}
}

### Story unlanded conquest evaluation
unlanded_choose_start_invasion_target_title_effect = {
	# adds every title of the chosen tier within a geographical region to a list
	#every_$INVADER_TARGET_TITLE_TIER$ = { # original setting, stories then specified the target title via argument
	$EVERY_RANDOM$_$INVADER_TARGET_TITLE_TIER$ = { #todo? switch using argument?
		limit = {
			any_de_jure_county = {
				title_province = {
					geographical_region = special_$INVADER_DYNN$_conquest_region_$INVADER_REGION$
				}
			}
		}
		add_to_list = start_invasion_target_titles
	}

	# shortcut for story to pick a randomized title
	random_in_list = {
		list = start_invasion_target_titles
		save_scope_as = random_start_invasion_target_title
	}
}

### Story unlanded conquest declaration
# currently doesn't demand subjugation
# due to landless invaders holding a special title that allows them to rule without holding a county, accepting subjugation would result in a liege that doesn't hold any counties until they decide to revoke one
unlanded_war_target_evaluation_and_declaration_effect = {
	save_scope_as = invader
	add_character_flag = { flag = free_historicinvasions_cb days = 24 }
	unlanded_choose_start_invasion_target_title_effect = {
		EVERY_RANDOM = $EVERY_RANDOM$
		INVADER_DYNN = $INVADER_DYNN$
		INVADER_TARGET_TITLE_TIER = $INVADER_TARGET_TITLE_TIER$
		INVADER_REGION = $INVADER_REGION$
	}
	if = {
		limit = {
			list_size = {
				name = start_invasion_target_titles
				value > 0
			}
		}
		every_in_list = {
			list = start_invasion_target_titles
			every_de_jure_top_liege = {
				limit = {
					is_ruler = yes
					NOR = {
						this = scope:invader
						top_liege = scope:invader
					}
					$INVADER_LIEGE_RESTRICTIONS$
				}
				add_to_temporary_list = start_lieges_to_declare_on
			}
		}
		every_in_list = {
			list = start_lieges_to_declare_on
			limit = {
				is_ruler = yes
				NOR = {
					this = scope:invader
					top_liege = scope:invader
				}
				$INVADER_LIEGE_RESTRICTIONS$
				is_independent_ruler = yes
			}
			scope:invader = { #todo figure out how to feed a list into here; global_var? argument?
				# while = {
				# 	limit = {
				# 		list_size = {
				# 			name = start_invasion_target_titles
				# 			value > 0
				# 		}
				# 	}
				# 	random_in_list = {
				# 		list = start_invasion_target_titles
				# 		save_scope_as = next_invasion_target_title
				# 	}
				# 	start_war = {
				# 		cb = historicinvasions_landless_invasion_war
				# 		target = prev
				# 		target_title = scope:next_invasion_target_title
				# 	}
				# 	scope:next_invasion_target_title = { remove_from_list = start_invasion_target_titles }
				# 	clear_saved_scope = next_invasion_target_title
				# }
				start_war = {
					cb = historicinvasions_landless_invasion_war
					target = prev
					$INVADER_TITLE_TARGETS$
				}				
			}
		}
	}
}

### kingdoms of hejaz and bahrain / oman
divide_arabia_effect = {
	# k_hejaz
	title:d_mecca = { add_to_temporary_list = hi_k_hejaz_list }
	title:d_medina = { add_to_temporary_list = hi_k_hejaz_list }
	title:d_shammar = { add_to_temporary_list = hi_k_hejaz_list }
	hidden_effect = {
		every_in_list = {
			list = hi_k_hejaz_list
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = title:k_hejaz
			}
		}
	}

	# k_bahrain
	title:d_oman = { add_to_temporary_list = hi_k_bahrain_list }
	title:d_al-hasa = { add_to_temporary_list = hi_k_bahrain_list }
	title:d_bahrain = { add_to_temporary_list = hi_k_bahrain_list }
	hidden_effect = {
		every_in_list = {
			list = hi_k_bahrain_list
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = title:k_bahrain
			}
		}
	}

	# k_arabia
	title:k_arabia = {
		set_capital_county = title:c_sharaf
		set_title_name = hi_k_arabia
	}

	# e_arabia
	title:k_hejaz = { add_to_temporary_list = hi_e_arabia_list }
	title:k_bahrain = { add_to_temporary_list = hi_e_arabia_list }
	title:k_oman = { add_to_temporary_list = hi_e_arabia_list }
	hidden_effect = {
		every_in_list = {
			list = hi_e_arabia_list
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_arabia
			}
		}
	}
}

bookmark_persia_to_seljuk_effect = {
	if = {
		limit = {
			has_game_rule = default_seljuk_invasion
			game_start_date >= 1035.1.1
			exists = title:e_persia
			exists = title:e_persia.holder
			title:e_persia.holder.house = house:house_seljuk
			title:e_persia = { any_in_de_jure_hierarchy = { tier = tier_county } } # has de jure land
			exists = title:e_seljuk
			NOT = { exists = title:e_seljuk.holder }
			NOT = { title:e_seljuk = { any_in_de_jure_hierarchy = { tier = tier_county } } } # doesn't have de jure land
		}
		# create e_seljuk
		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		title:e_seljuk = {
			change_title_holder = {
				holder = title:e_persia.holder
				change = scope:title_change
			}
			copy_title_history = title:e_persia
		}
		resolve_title_and_vassal_change = scope:title_change

		# de jure changes
		title:e_persia = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_seljuk
			}
		}

		# destroy other titles
		title:e_seljuk.holder = {
			set_primary_title_to = title:e_seljuk
			destroy_title = title:e_persia
		}

		# change name
		title:e_seljuk = { set_title_name = e_persia }
	}
}

bookmark_cuman-kipchak_empire_effect = {
	if = {
		limit = {
			has_game_rule = default_terteroba_invasion
			game_start_date >= 1000.1.1
			game_start_date <= 1200.1.1
			exists = title:k_cuman
			exists = title:k_cuman.holder
			exists = title:e_terteroba
			NOT = { exists = title:e_terteroba.holder }
			NOT = { title:e_terteroba = { any_in_de_jure_hierarchy = { tier = tier_county } } }
		}
		# create title
		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		title:e_terteroba = {
			change_title_holder = {
				holder = title:k_cuman.holder
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change
		# de jure changes
		title:k_pontic_steppe = { add_to_temporary_list = terteroba_kingdoms }
		title:k_caucasus = { add_to_temporary_list = terteroba_kingdoms }
		title:k_caspian_steppe = { add_to_temporary_list = terteroba_kingdoms }
		title:k_kimek = { add_to_temporary_list = terteroba_kingdoms }
		title:k_cuman = { add_to_temporary_list = terteroba_kingdoms }
		title:k_kipchak = { add_to_temporary_list = terteroba_kingdoms }
		title:k_pechenegs = { add_to_temporary_list = terteroba_kingdoms }
		every_in_list = {
			list = terteroba_kingdoms
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_terteroba
			}
		}
		# block CB
		add_to_global_variable_list = {
			name = historicinvasions_story_ended
			target = flag:terteroba_story_ended
		}
		# clean-up
		title:e_tartaria = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_turan
			}
		}
	}
}

bookmark_de_jure_changes_effect = { # vanilla start dates: 867.1.1 / 1066.9.15
	# Istria
	title:d_istria = { set_de_jure_liege_title = title:k_italy }

	if = { # East Francia
		limit = {
			game_start_date >= 843.1.1 # east francia
			game_start_date < 962.2.2 # HRE
		}
		title:k_east_francia = { add_title_law = feudal_elective_succession_law }
	}
	if = { # Sicily & Venice
		limit = {
			game_start_date >= 1038.1.1
		}
		title:k_sicily = { add_to_temporary_list = hi_e_italy_list }
		title:k_naples = { add_to_temporary_list = hi_e_italy_list }
		title:k_trinacria = { add_to_temporary_list = hi_e_italy_list }
		title:k_venice = { add_to_temporary_list = hi_e_italy_list }
		every_in_list = {
			list = hi_e_italy_list
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_italy
			}
		}
	}
	if = { # Balkans
		limit = {
			game_start_date >= 917.1.1 # first Bulgarian Empire conquers d_dyrrachion
		}
		title:k_croatia = { add_to_temporary_list = hi_e_carpathia_list }
		title:k_bosnia = { add_to_temporary_list = hi_e_carpathia_list }
		title:k_serbia = { add_to_temporary_list = hi_e_carpathia_list }
		every_in_list = {
			list = hi_e_carpathia_list
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = title:e_carpathia
			}
		}
	}
	if = { # HRE
		limit = {
			game_start_date >= 962.2.2 # coronation of Otto the Great
		}
		title:k_italy = { set_de_jure_liege_title = title:e_hre }
		title:k_lotharingia = { set_title_name = hi_k_lorraine }
		if = { # Bohemia
			limit = { game_start_date > 1002.1.1 }
			title:k_bohemia = { set_de_jure_liege_title = title:e_hre }
		}
		if = { # Burgundy
			limit = { game_start_date > 1032.1.1 }
			title:k_burgundy = {
				set_de_jure_liege_title = title:e_hre
				set_title_name = hi_k_arles
			}
		}
		if = {
			limit = { game_start_date >= 1181.1.1 }
			title:k_pomerania = { set_de_jure_liege_title = title:e_hre }
		}
	}
}

### pope restores jerusalem de jure
pope_restores_jerusalem_de_jure_decision_effect = {
	title:d_palestine = { add_to_temporary_list = hi_k_jerusalem_list }
	title:d_urdunn = { add_to_temporary_list = hi_k_jerusalem_list }
	title:d_oultrejourdain = { add_to_temporary_list = hi_k_jerusalem_list }
	every_in_list = {
		list = hi_k_jerusalem_list
		every_in_de_jure_hierarchy = {
			limit = {
				tier = tier_duchy
				NOT = { target_is_de_jure_liege_or_above = title:k_israel }
			}
			set_de_jure_liege_title = title:k_jerusalem
		}
	}
}

### county is looted by invader
# called by on_county_occupied
invader_loots_county_effect = {
	scope:county = {
		change_development_level = {
			subtract = scope:county.development_level
			multiply = 0.2
			floor = yes
		}
		hidden_effect = {
			every_county_province = {
				add_province_modifier = {
					modifier = recently_looted_modifier
					years = 3
				}
			}
		}
		# to save space in the displayed message
		show_as_tooltip = {
			add_county_modifier = {
				modifier = recently_looted_modifier
				years = 3
			}
		}
	}
	scope:occupant = {
		add_gold = {
			add = scope:county.development_level
			multiply = 5
		}
		if = {
			limit = { dread < 80 }
			add_dread = 2
		}
	}
}

### new title update story compatibility v1.22.0
hi_update_story_to_new_title_effect = {
	if = {
		limit = {
			NOT = { has_variable = hi_update_story_to_new_title_var }
			exists = title:$NEW_TITLE$
			exists = title:$OLD_TITLE$
			story_owner = { has_title = title:$OLD_TITLE$ }
			title:$NEW_TITLE$ = { is_title_created = no }
		}
		
		# update title
		story_owner = { save_scope_as = story_owner_scope }
		create_title_and_vassal_change = {
			type = returned
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		title:$NEW_TITLE$ = {
			change_title_holder = {
				holder = scope:story_owner_scope
				change = scope:title_change
			}
			copy_title_history = title:$OLD_TITLE$
		}
		resolve_title_and_vassal_change = scope:title_change

		# de jure transfer
		title:$OLD_TITLE$ = {
			every_in_de_jure_hierarchy = {
				limit = { tier < title:$OLD_TITLE$.tier }
				set_de_jure_liege_title = title:$NEW_TITLE$
			}
		}

		# destroy old title
		story_owner = {
			set_primary_title_to = title:$NEW_TITLE$
			destroy_title = title:$OLD_TITLE$
		}

		# only once
		set_variable = hi_update_story_to_new_title_var

		# debug log
		debug_log = "successfully updated an invasion story to its new title on:"
		debug_log_date = yes
		debug_log_scopes = yes
	}
}

hi_aid_realm_faith_conversion_effect = {
	every_vassal = {
		limit = {
			NOR = {
				any_held_title = { is_head_of_faith = yes }
				has_trait = zealous
			}
		}
		add_opinion = {
			modifier = hi_aid_realm_faith_conversion
			target = prev
		}
	}
}